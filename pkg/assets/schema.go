// Code generated by go-bindata. DO NOT EDIT.
// sources:
// pkg/api/schema.graphql
package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _pkgApiSchemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x56\x4f\x6f\xe3\xc6\x0f\xbd\xfb\x53\x30\x9b\x43\x6c\x20\xc9\xe5\x77\xfa\x19\xe8\xc1\xd9\xa4\x41\x0e\x9b\x6d\xe3\xa0\x45\xb0\x08\x16\xb4\x44\x4b\x83\x8c\x66\x54\x0e\x65\xc3\x5b\xec\x77\x2f\xe6\x9f\x2c\xc5\x4e\xba\x6d\x4f\x4e\x46\xe4\x23\xe7\xf1\x91\x43\x57\xd4\xd4\x20\xfc\x39\x01\x00\xf8\xa3\x23\xde\xcd\xe1\x57\xff\x33\xf9\x3e\x99\x9c\xc6\x3f\x81\xa9\x65\x72\x64\xc4\x81\xd4\x04\x64\x84\x77\xd0\x5a\xe5\x0f\x94\x11\x1b\x4e\x23\xd2\x44\x76\x2d\x25\xb7\x08\x7a\x0a\x0f\x24\x1d\x9b\xe8\xab\x95\x13\xb0\x6b\x58\x75\x95\x83\xb5\x65\x40\xa8\xd4\x86\x0c\x94\x28\xe4\x04\x9b\x16\xa6\x25\xad\xb1\xd3\x3e\x98\x05\x1d\x8e\xc3\xd7\xd9\x65\xc0\xf3\x9e\xd3\xde\x7a\x0e\x4b\x61\x65\x2a\xf8\x09\x3e\x7c\x8d\xc6\x1f\xce\xa1\xb0\x4d\x6b\x8d\x4f\x78\x0e\x5f\xa2\xc1\xc9\xf3\x6c\x0e\x5f\xae\xba\xea\xf9\xe4\x55\x5a\x08\xce\x60\xeb\x6a\x1b\x12\xf3\x49\x96\x28\xb8\x42\x47\xff\x2e\xc1\x8c\xf6\x7e\x92\xb3\x39\x2c\x93\xe1\x11\x9a\x82\x2b\xa0\x29\x81\xad\xd6\x5d\xeb\x00\x9d\xb3\x85\x42\xa1\x12\xb6\x4a\xea\x3e\x2d\x26\x4d\xe8\x28\x86\x4e\xff\x4c\x0d\x36\x94\x83\x9e\xbc\x4d\xc7\x43\x34\x3f\xe0\x23\x17\x29\xc7\xb6\x1b\xe2\x90\x56\x8b\x4e\xe0\x7f\xe0\x5a\x0e\xb5\x9f\xfe\x1f\xb6\x44\x2f\x2e\x5d\x3c\x99\x4f\xdf\x64\xff\x21\x18\x1c\x29\x40\x0e\x88\x5a\xe7\x3b\x38\x98\xc6\x7b\xee\xef\x7d\x40\xca\x6c\x74\xeb\xf7\x02\x47\x8b\xe7\x13\xaf\xea\xa0\xd0\xab\xae\xea\xf5\xf9\x58\x93\x57\xd5\x37\xa5\x35\xc2\xdd\x75\x04\x55\xe5\x1c\xee\x8c\x9c\x0c\x6c\x7c\x7c\x90\x1a\x05\xa4\x56\xce\xbb\xc0\x16\x1d\x30\x15\x96\x4b\x2a\x61\xfa\xf4\xf4\xf4\x74\xf1\xe9\xd3\xc5\xf5\x75\xca\xec\x40\x01\x43\xb8\x3e\xdb\x8c\x19\xb2\x80\x15\x69\x6b\x2a\xaf\xad\x88\xd1\x9b\x1d\xc3\xf0\x0e\x4e\x50\x3a\x77\x09\x70\x7f\xf3\xfb\x39\x2c\x96\xcb\xbb\xdb\xfb\x9b\xeb\x73\xf8\xe5\xf3\xf2\xf1\x1c\x2c\xc3\xe7\xfb\xaf\xd7\x37\xbf\x25\x71\x06\xe3\x63\x50\xa2\x44\x53\xee\x80\x55\x57\x25\xfb\xae\x69\xd0\x0f\x85\x43\x87\x44\xfb\x81\x32\xb3\x3f\xc0\xbd\xed\x8d\x94\x83\xb3\x8b\x8b\x8b\xb3\x88\x2a\xc8\x15\x49\xaa\xca\x31\x6c\x6a\x50\xe9\x9c\x4c\x4b\xec\xac\x19\xb3\xa4\x42\x47\xa8\xca\x50\xd9\x33\x95\x0f\x1e\xed\x6b\xc8\x05\xb8\xc2\x32\x41\x49\x42\xdc\x28\xef\xb4\x66\xdb\x64\xb4\x33\x07\x2d\x2b\xcb\x4a\x76\x41\x5e\x1b\xe5\xd4\x4a\x69\x25\xbb\x08\xdc\x36\x4b\xef\x3e\x12\xc4\xa2\x17\xed\x0b\xed\xb6\x96\xcb\xc3\x16\x1d\x11\x99\xad\x06\xca\xcc\x50\x77\x3d\xe7\x50\xa3\x03\x6b\xc8\x57\xad\xf1\x09\x17\x9d\x13\xdb\x10\x43\x11\x5a\xe2\x75\x04\x25\x49\x23\xc9\xec\x63\xa0\xf3\xca\x5a\x4d\x68\x86\x7c\x9a\xae\x59\x11\xfb\x6c\x4b\xdc\x39\x70\xca\x14\x34\x56\xf1\x5a\xb1\x13\x10\xc6\xe2\x85\xca\xc4\x67\x95\xaf\x9c\xbb\x26\x36\xf0\xa8\x71\x42\x53\xa4\x42\xc5\xb6\xfc\x7b\xe5\x8b\x15\xd4\x69\xfc\x6b\x1d\xdf\x02\x65\x02\x44\x78\x82\x52\x78\xad\xe7\x70\xc5\x84\x2f\xa5\xdd\x9a\x7f\xe2\x1f\xc9\x59\x69\x5b\xbc\x10\xf7\xcc\xa7\xe7\x23\x9e\xba\xff\x04\xfd\x5e\x89\x44\xb0\xa8\x33\x85\xc3\xc2\x8c\x43\xf6\x83\x28\x1f\x8d\x58\x0d\x69\x0c\xaa\x36\xcc\x23\xce\xfd\x01\x51\xc1\xf8\x60\x5a\x8d\x9c\x41\x95\x2e\x36\x10\x32\x1d\x01\x0a\xb2\xdf\x12\x13\x18\x2b\xf9\x7b\xcb\xb4\x51\xb6\x73\xa1\x98\x67\x6e\x18\xd2\xd0\xf6\x47\x03\x06\xd4\xf7\x10\x43\x6c\x1c\x87\x2e\x3a\x66\x3f\x19\x07\x21\x0b\x6d\x1d\x95\x7b\x41\x9e\xf6\xef\x27\xb4\x6c\x37\xaa\xf4\xe4\x6b\xdd\x3f\xe0\x60\x88\xfc\x54\xf6\xa5\x0c\x90\x5a\x91\x91\x33\xe7\x3b\xdf\x08\xb4\x58\xd1\x65\x2c\x41\x8f\x73\xa0\xeb\x7e\xe4\xf4\x1b\x82\x8a\xda\x18\x8d\x7a\x80\x5b\x32\xc4\xa8\xf5\x2e\xee\x38\xfb\x95\x20\xdf\x27\x6f\x14\x3f\xf0\x2c\x0c\xdf\xc2\x7e\x4b\xda\x97\xcb\xfb\xee\x17\xa1\xb4\xd2\xf4\x33\x29\x76\xa0\xdf\x4b\x42\x27\xc3\x06\x39\xf0\xed\x2b\x32\x90\xf6\x31\xb8\xe8\x3a\x4f\x3d\x9e\x28\x5e\xf4\x03\xbc\xe7\xd8\xfb\xfa\xfd\x22\x94\x2d\x3d\xc9\x07\xbb\x49\xf2\x3a\x07\x74\xb0\x25\xad\xfd\x6f\xde\x26\x7c\x02\x84\x45\xed\x47\x51\xe6\x27\x47\xf1\xdf\x2a\xc6\xb6\xf6\xdb\x52\xdb\x71\x6b\x1d\xb9\x54\xa6\xf4\x5c\xa4\x2a\x8d\x56\x9c\x01\x7d\x71\x8e\x79\xe8\x3c\x94\x86\x0b\x92\x13\xe4\xa3\x0f\x69\xaa\x20\x2c\x36\xa8\x34\xc6\xe1\x3f\x20\xa7\xc2\x63\x4e\xa1\xc2\xb8\x16\x62\xd8\xd6\xaa\xa8\xc1\x58\xdf\x19\xb0\x26\x94\x8e\x3d\x31\x4c\x80\x65\x99\xa7\x41\x3a\xff\x68\x9b\x56\x93\x1c\x4d\xff\x2d\xc8\xc2\x96\xe1\x11\xc5\xa2\xa0\x56\xfa\xf1\x62\x4b\xfa\x99\x89\xbe\x1d\x60\x3d\x1c\x23\x7b\x45\xb2\x25\x32\x91\x85\x7e\x8d\x05\x42\xd6\x8a\x9c\xcc\x42\x49\x6f\x17\xfb\x2f\x51\xc9\xb3\xe1\x76\x37\x5c\xe3\xbe\x4f\xfe\x0a\x00\x00\xff\xff\x35\x94\xe9\xfb\x3f\x0c\x00\x00")

func pkgApiSchemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_pkgApiSchemaGraphql,
		"pkg/api/schema.graphql",
	)
}

func pkgApiSchemaGraphql() (*asset, error) {
	bytes, err := pkgApiSchemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "pkg/api/schema.graphql", size: 3135, mode: os.FileMode(436), modTime: time.Unix(1526666473, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"pkg/api/schema.graphql": pkgApiSchemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"pkg": &bintree{nil, map[string]*bintree{
		"api": &bintree{nil, map[string]*bintree{
			"schema.graphql": &bintree{pkgApiSchemaGraphql, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

