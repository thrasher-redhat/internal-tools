// Code generated by go-bindata. DO NOT EDIT.
// sources:
// cmd/serve/graphiql.html
package graphiql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _cmdServeGraphiqlHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x54\x5d\x6f\xd3\x3c\x14\xbe\xce\x7e\x85\x5f\x4b\xaf\x94\x4a\x9b\xdd\x0c\xb4\x8b\x34\xed\xc5\xd8\x40\xa0\xc1\x36\xe0\x86\x4b\xcf\x3e\xa9\x3d\x12\x3b\x1c\x3b\xdd\xa2\x69\xff\x1d\xc5\x49\x4a\x57\x24\x40\x68\x5c\xd5\xe7\xf4\x3c\x1f\xf6\x79\x94\xe2\xbf\xb3\xcb\x57\x9f\xbf\x5c\x9d\x13\x1d\xea\x6a\x75\x50\x0c\x3f\x49\xa1\x41\xa8\xd5\x41\x92\x14\x95\xb1\x5f\x89\x46\x28\x97\x54\x87\xd0\xf8\x9c\x73\xa9\xec\xad\x67\xb2\x72\xad\x2a\x2b\x81\xc0\xa4\xab\xb9\xb8\x15\xf7\xbc\x32\x37\x9e\xaf\x51\x34\xda\x7c\xab\xf8\x9c\x65\x19\xcb\xb2\x6d\x83\xd5\xc6\x32\xe9\x3d\x25\x08\xd5\x92\xfa\xd0\x55\xe0\x35\x40\xa0\x84\x47\x2d\x2f\xd1\x34\x81\x78\x94\x7f\x2c\x06\xfe\xe4\xa8\x41\x57\x1b\x0f\xfc\x25\xcb\x58\xb6\xdb\x61\xa2\x0d\x2e\xaa\xde\x7a\xba\x2a\xf8\xc0\xff\xb7\x52\x25\x04\xa9\xf9\x31\x9b\xb3\x17\xc3\xf9\xd9\x98\x11\x84\x0c\x3c\x3b\x61\xc7\x6c\xce\xdb\x5a\x0d\x0d\xd6\xa0\x53\xad\x0c\xc6\xd9\xe7\x55\x3a\x52\xae\xfe\x49\xad\x6f\xfe\x0b\xc5\x5f\xa7\x61\x4f\xa1\xe0\x63\xee\x8a\x1b\xa7\x3a\x12\x13\xb2\xa4\x77\x46\x05\x9d\x93\x6c\x3e\xff\x7f\x41\x34\x98\xb5\x0e\x53\x55\x0b\x5c\x1b\x9b\x93\xf9\x82\xb8\x0d\x60\x59\xb9\xbb\x9c\x68\xa3\x14\xd8\x05\x8d\x96\x95\xd9\x10\xa3\x96\x74\x92\xa5\x13\xeb\x0e\xd1\x46\x2f\xe8\xea\xc2\x09\x65\xec\x9a\x31\x56\x70\x65\x36\x3b\xf7\xed\x8f\x49\xd9\xda\xf8\x30\x24\x12\x5d\x5f\xbc\xee\x13\x00\x98\x8e\xe5\x95\x40\x51\xfb\x19\x79\xe8\x67\x13\x84\xd0\xa2\x25\x31\x25\x29\xe5\xa2\x31\x7c\x93\xd1\xc3\xf1\xdf\xa4\x86\xa0\x9d\xca\x09\x6d\x9c\x0f\xf4\x70\x68\xf6\x37\xce\xc9\xbb\x4f\x97\x1f\x98\x0f\x68\xec\xda\x94\xdd\x1e\xfb\x38\x29\x11\x14\xd8\x60\x44\xe5\x73\x42\x8d\x95\x55\xab\x60\xa4\x79\x9c\xb1\xa0\xc1\xa6\x5b\xbb\x29\x82\x6f\x9c\xf5\x30\x79\x9b\xcc\x4d\x7d\x16\xe0\x3e\xa4\xb3\xc5\x6f\xe0\xa7\x4e\x75\x5b\x8a\x80\xdd\x74\x9c\xe8\xa2\xf1\x46\xa0\x87\xa7\x90\x81\x37\x79\x24\x52\x04\xa9\x49\x0a\x88\x0e\x67\xfb\xe8\x5d\xc8\x84\x18\x0d\xc5\x32\x16\x1f\xfb\x9c\x9e\x5d\xbe\x67\x08\x56\x01\xa6\x71\x20\x36\x99\x44\x10\x01\xce\x2b\xa8\xc1\x86\xf4\x4d\xdc\xf5\xf5\xc5\x21\x79\x28\x87\x35\xe5\x7b\x6b\x7b\x1c\xdf\x52\x39\xd9\xf6\x10\xb6\x86\x30\xa2\x4f\xbb\xb7\x2a\xfd\x11\x97\x59\x3f\x17\x4d\x3c\xc9\x69\xbf\xad\xd5\x41\xc1\xe3\xf7\xf2\x7b\x00\x00\x00\xff\xff\x25\xc4\x9e\x26\x46\x05\x00\x00")

func cmdServeGraphiqlHtmlBytes() ([]byte, error) {
	return bindataRead(
		_cmdServeGraphiqlHtml,
		"cmd/serve/graphiql.html",
	)
}

func cmdServeGraphiqlHtml() (*asset, error) {
	bytes, err := cmdServeGraphiqlHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "cmd/serve/graphiql.html", size: 1350, mode: os.FileMode(436), modTime: time.Unix(1525107605, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"cmd/serve/graphiql.html": cmdServeGraphiqlHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"cmd": &bintree{nil, map[string]*bintree{
		"serve": &bintree{nil, map[string]*bintree{
			"graphiql.html": &bintree{cmdServeGraphiqlHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

